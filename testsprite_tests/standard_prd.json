{
  "meta": {
    "project": "Medical Appointment and Doctor Management Platform",
    "date": "2025-10-17",
    "prepared_by": "Generated by TestSprite"
  },
  "product_overview": "A web-based platform that facilitates user registration, doctor profile management, appointment booking, video consultation, payment processing, and admin oversight to streamline healthcare services.",
  "core_goals": [
    "Enable secure and role-based user authentication for patients, doctors, and admins.",
    "Allow doctors to create, update, and manage detailed profiles including specialization and consultation fees.",
    "Provide users the ability to search and book appointments with doctors, supporting both in-person and video consultations.",
    "Integrate payment processing for appointment fees using Razorpay.",
    "Support profile image and document uploads for users and doctors.",
    "Deliver an admin management panel to oversee users, doctors, and manage disputes.",
    "Ensure seamless video calling and chat features within the appointment system.",
    "Enable patients to book appointments easily from doctor profiles, and doctors to view/manage these appointments via their dashboard."
  ],
  "key_features": [
    "User Authentication: Registration, login, logout, and session management with role distinctions (patient, doctor, admin).",
    "Doctor Management: Creation and editing of doctor profiles with fields like specialization, experience, bio, fees, and profile image upload.",
    "Appointment Management: Booking, listing, and tracking appointments including type (video or in-person), date, duration, and notes.",
    "Payment Integration: Razorpay payment order creation and verification for secure transaction handling.",
    "File Upload: Uploading profile pictures and medical documents with image cropping and adjustment options.",
    "Admin Panel: Manage users, doctors, and disputes with access control for administration.",
    "Video Calling and Chatting: Real-time communication features integrated within appointment sessions.",
    "User Interface Enhancements: \"Book Appointment\" button functional on doctor profiles, and appointment listings accessible on doctor dashboards."
  ],
  "user_flow_summary": [
    "Users register and login based on role (patient, doctor, admin).",
    "Doctors create and update their profiles including adding profile images.",
    "Patients search for doctors using filters like specialization, location, and consultation fee range.",
    "Patients book appointments specifying type (video or in-person) and pay via Razorpay integration.",
    "Doctors receive appointment notifications and can manage their booked appointments in their dashboard.",
    "Users upload profile pictures and related documents as part of their profile management.",
    "During video appointments, users communicate through integrated video calling and chat features.",
    "Admins access their panel to manage and monitor platform users and disputes."
  ],
  "validation_criteria": [
    "User authentication workflows function securely with role-based access controls enforced.",
    "Doctors can successfully update profiles including profile image change functionality.",
    "Appointment booking via the \"Book Appointment\" button works correctly from doctor profiles and reflects in doctor dashboards.",
    "Video calling and chat features are stable, functional during appointments.",
    "Payment transactions are processed, verified, and recorded accurately via Razorpay.",
    "File uploads (images, documents) complete successfully with validation and cropping features.",
    "Admin panel access is restricted and functionalities for managing users and doctors operate as intended."
  ],
  "code_summary": {
    "tech_stack": [
      "TypeScript",
      "React",
      "Express.js",
      "MongoDB",
      "Mongoose",
      "Vite",
      "Passport.js",
      "Razorpay",
      "Multer",
      "Zod",
      "Tailwind CSS",
      "Radix UI"
    ],
    "features": [
      {
        "name": "User Authentication",
        "description": "User registration, login, logout, and session management",
        "files": [
          "server/routes.ts",
          "server/auth.ts",
          "shared/mongodb-schema.ts"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "info": {
            "title": "User Authentication API",
            "version": "1.0.0"
          },
          "paths": {
            "/api/register": {
              "post": {
                "summary": "Register a new user",
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "username": {
                            "type": "string"
                          },
                          "email": {
                            "type": "string",
                            "format": "email"
                          },
                          "password": {
                            "type": "string",
                            "minLength": 6
                          },
                          "role": {
                            "type": "string",
                            "enum": [
                              "patient",
                              "doctor",
                              "admin"
                            ]
                          },
                          "firstName": {
                            "type": "string"
                          },
                          "lastName": {
                            "type": "string"
                          },
                          "phone": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "username",
                          "email",
                          "password"
                        ]
                      }
                    }
                  }
                },
                "responses": {
                  "201": {
                    "description": "User created successfully"
                  },
                  "400": {
                    "description": "Invalid data"
                  },
                  "409": {
                    "description": "Username or email already exists"
                  }
                }
              }
            },
            "/api/login": {
              "post": {
                "summary": "User login",
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "username": {
                            "type": "string"
                          },
                          "password": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "username",
                          "password"
                        ]
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "Login successful"
                  },
                  "401": {
                    "description": "Authentication failed"
                  }
                }
              }
            },
            "/api/logout": {
              "post": {
                "summary": "User logout",
                "responses": {
                  "200": {
                    "description": "Logout successful"
                  }
                }
              }
            },
            "/api/user": {
              "get": {
                "summary": "Get current user information",
                "responses": {
                  "200": {
                    "description": "User information"
                  },
                  "401": {
                    "description": "Not authenticated"
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "Doctor Management",
        "description": "Doctor profile creation, management, and search functionality",
        "files": [
          "server/routes.ts",
          "shared/mongodb-schema.ts"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "info": {
            "title": "Doctor Management API",
            "version": "1.0.0"
          },
          "paths": {
            "/api/doctor/profile": {
              "get": {
                "summary": "Get doctor profile",
                "responses": {
                  "200": {
                    "description": "Doctor profile"
                  },
                  "401": {
                    "description": "Not authenticated"
                  },
                  "403": {
                    "description": "Doctor access required"
                  },
                  "404": {
                    "description": "Profile not found"
                  }
                }
              },
              "put": {
                "summary": "Update doctor profile",
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "specialization": {
                            "type": "string"
                          },
                          "experience": {
                            "type": "number"
                          },
                          "consultationFee": {
                            "type": "number"
                          },
                          "bio": {
                            "type": "string"
                          },
                          "qualifications": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "hospitalAffiliation": {
                            "type": "string"
                          },
                          "licenseNumber": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "Profile updated"
                  },
                  "400": {
                    "description": "Invalid data"
                  },
                  "401": {
                    "description": "Not authenticated"
                  },
                  "403": {
                    "description": "Doctor access required"
                  }
                }
              }
            },
            "/api/doctors": {
              "get": {
                "summary": "Search doctors",
                "parameters": [
                  {
                    "name": "specialization",
                    "in": "query",
                    "schema": {
                      "type": "string"
                    }
                  },
                  {
                    "name": "location",
                    "in": "query",
                    "schema": {
                      "type": "string"
                    }
                  },
                  {
                    "name": "minFee",
                    "in": "query",
                    "schema": {
                      "type": "number"
                    }
                  },
                  {
                    "name": "maxFee",
                    "in": "query",
                    "schema": {
                      "type": "number"
                    }
                  }
                ],
                "responses": {
                  "200": {
                    "description": "List of doctors"
                  }
                }
              }
            },
            "/api/doctors/{id}": {
              "get": {
                "summary": "Get doctor by ID",
                "parameters": [
                  {
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                      "type": "string"
                    }
                  }
                ],
                "responses": {
                  "200": {
                    "description": "Doctor information"
                  },
                  "404": {
                    "description": "Doctor not found"
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "Appointment Management",
        "description": "Create, manage, and track medical appointments",
        "files": [
          "server/routes.ts",
          "shared/mongodb-schema.ts"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "info": {
            "title": "Appointment Management API",
            "version": "1.0.0"
          },
          "paths": {
            "/api/appointments": {
              "post": {
                "summary": "Create new appointment",
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "doctorId": {
                            "type": "string"
                          },
                          "appointmentDate": {
                            "type": "string",
                            "format": "date-time"
                          },
                          "duration": {
                            "type": "number",
                            "default": 30
                          },
                          "type": {
                            "type": "string",
                            "enum": [
                              "video",
                              "in-person"
                            ]
                          },
                          "consultationFee": {
                            "type": "number"
                          },
                          "notes": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "doctorId",
                          "appointmentDate",
                          "type",
                          "consultationFee"
                        ]
                      }
                    }
                  }
                },
                "responses": {
                  "201": {
                    "description": "Appointment created"
                  },
                  "400": {
                    "description": "Invalid data"
                  },
                  "401": {
                    "description": "Not authenticated"
                  }
                }
              },
              "get": {
                "summary": "Get user appointments",
                "responses": {
                  "200": {
                    "description": "List of appointments"
                  },
                  "401": {
                    "description": "Not authenticated"
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "Payment Processing",
        "description": "Payment integration with Razorpay for appointment fees",
        "files": [
          "server/routes.ts",
          "shared/mongodb-schema.ts"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "info": {
            "title": "Payment Processing API",
            "version": "1.0.0"
          },
          "paths": {
            "/api/payments/create-order": {
              "post": {
                "summary": "Create Razorpay payment order",
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "appointmentId": {
                            "type": "string"
                          },
                          "amount": {
                            "type": "number"
                          }
                        },
                        "required": [
                          "appointmentId",
                          "amount"
                        ]
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "Payment order created"
                  },
                  "400": {
                    "description": "Invalid data"
                  },
                  "401": {
                    "description": "Not authenticated"
                  }
                }
              }
            },
            "/api/payments/verify": {
              "post": {
                "summary": "Verify payment",
                "requestBody": {
                  "required": true,
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "razorpay_order_id": {
                            "type": "string"
                          },
                          "razorpay_payment_id": {
                            "type": "string"
                          },
                          "razorpay_signature": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "razorpay_order_id",
                          "razorpay_payment_id",
                          "razorpay_signature"
                        ]
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "Payment verified"
                  },
                  "400": {
                    "description": "Payment verification failed"
                  },
                  "401": {
                    "description": "Not authenticated"
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "File Upload",
        "description": "Profile picture and document upload functionality",
        "files": [
          "server/routes.ts",
          "server/image-utils.ts"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "info": {
            "title": "File Upload API",
            "version": "1.0.0"
          },
          "paths": {
            "/api/upload/profile-picture": {
              "post": {
                "summary": "Upload profile picture",
                "requestBody": {
                  "required": true,
                  "content": {
                    "multipart/form-data": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "image": {
                            "type": "string",
                            "format": "binary"
                          },
                          "crop": {
                            "type": "string"
                          },
                          "nudge": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "image"
                        ]
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "Image uploaded successfully"
                  },
                  "400": {
                    "description": "No image uploaded"
                  },
                  "401": {
                    "description": "Not authenticated"
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "Admin Management",
        "description": "Admin panel for managing users, doctors, and disputes",
        "files": [
          "server/routes.ts",
          "server/routes-admin.ts"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "info": {
            "title": "Admin Management API",
            "version": "1.0.0"
          },
          "paths": {
            "/api/admin/users": {
              "get": {
                "summary": "Get all users",
                "responses": {
                  "200": {
                    "description": "List of users"
                  },
                  "401": {
                    "description": "Not authenticated"
                  },
                  "403": {
                    "description": "Admin access required"
                  }
                }
              }
            },
            "/api/admin/doctors": {
              "get": {
                "summary": "Get all doctors",
                "responses": {
                  "200": {
                    "description": "List of doctors"
                  },
                  "401": {
                    "description": "Not authenticated"
                  },
                  "403": {
                    "description": "Admin access required"
                  }
                }
              }
            }
          }
        }
      }
    ]
  }
}
